Here's the modified version using Lombok annotations for cleaner code:

First, ensure you have these dependencies in your pom.xml:


        org.springframework.boot
        spring-boot-starter-data-jpa

        org.springframework.boot
        spring-boot-starter-web

        mysql
        mysql-connector-java
        runtime

        org.apache.poi
        poi-ooxml
        5.2.2

        org.projectlombok
        lombok
        true



application.properties:

spring.datasource.url=jdbc:mysql://localhost:3306/your_database
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

Entity class using Lombok:

import lombok.*;
import javax.persistence.*;

@Entity
@Table(name = "employees")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@ToString
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String email;
    private String department;
    private Double salary;
}

Repository:

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface EmployeeRepository extends JpaRepository {
}

Service with Lombok:

`java
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class ExcelService {

    private final EmployeeRepository employeeRepository;

    public void importExcelFile(MultipartFile file) throws IOException {
        List employees = new ArrayList();

        try (Workbook workbook = new XSSFWorkbook(file.getInputStream())) {
            Sheet sheet = workbook.getSheetAt(0);

            Iterator rows = sheet.iterator();
            rows.next(); // Skip header row

            while (rows.hasNext()) {
                Row currentRow = rows.next();

                Employee employee = Employee.builder()
                    .name(getCellValue(currentRow.getCell(0)))
                    .email(getCellValue(currentRow.getCell(1)))
                    .department(getCellValue(currentRow.getCell(2)))
                    .salary(Double.parseDouble(getCellValue(currentRow.getCell(3))))
                    .build();

                employees.add(employee);
            }

            employeeRepository.saveAll(employees);
            log.info("Successfully imported {} employees", employees.size());

        } catch (Exception e) {
            log.error("Error while importing excel file: {}", e.getMessage());
            throw e;
        }
    }

    private String getCellValue(Cell cell) {
        if (cell == null) {
            return null;
        }
        return switch (cell.getCellType()) {
            case STRING -> cell.getStringCellValue();
            case NUMERIC -> String.valueOf(cell.get